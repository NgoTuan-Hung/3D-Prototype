- how can i tell the ai to stop for a while when it is about to use the charge skill
- ai should only use skill when it should
- can we give hint about skill in code ??
- they both modify the same variable move 

TODOS:
- Fix effect collision ❎
- Reconstruct summon bigsword and thousand sword skill ✅
- Make the swordskill available for mob ✅
- Make dropping system
- Make dynamic enemies


--Some mistake:
+ Be careful of pass by reference in coroutine
+ Be careful of changing the velocity in coroutine
+ 


,
        {
            "skillName": "SwordSkill",
            "subSkillName": "SwordSkillThousandSword",
            "functionName": "Trigger",
            "keybind":"2"
        }

--Rotation backup
using System;
using System.Collections;
using System.Collections.Generic;
using Unity.VisualScripting;
using UnityEngine;

[Serializable]
public class RotatableObject : MonoBehaviour
{
    [Header("Rotation")]
    [SerializeField] private float rotateAmountAbsY = 10f;
    [SerializeField] private float rotateAmountY;
    [SerializeField] private float toAngleY;
    [SerializeField] private float prevToAngleY = 0;
    public enum directionEnum {Clockwise = 1, CounterClockwise = -1}
    [SerializeField] private float moveAngleY;
    [SerializeField] private float movedAngleY = 0;
    [SerializeField] private bool finishY = false;
    private UtilObject utilObject = new UtilObject();
    private GetOptimalRotateDirectionAndMoveAngleClass returnValue;

    public float RotateAmountAbsY { get => rotateAmountAbsY; set => rotateAmountAbsY = value; }
    public float RotateAmountY { get => rotateAmountY; set => rotateAmountY = value; }
    public float ToAngleY { get => toAngleY; set => toAngleY = value; }
    public float PrevToAngleY { get => prevToAngleY; set => prevToAngleY = value; }
    public float MoveAngleY { get => moveAngleY; set => moveAngleY = value; }
    public float MovedAngleY { get => movedAngleY; set => movedAngleY = value; }
    public bool FinishY { get => finishY; set => finishY = value; }

    public GetOptimalRotateDirectionAndMoveAngleClass GetOptimalRotateDirectionAndMoveAngleY(float toAngle)
    {
        GetOptimalRotateDirectionAndMoveAngleClass gORDAMAC = new GetOptimalRotateDirectionAndMoveAngleClass
        {
            RotateDirection = toAngle >= transform.rotation.eulerAngles.y ? directionEnum.Clockwise : directionEnum.CounterClockwise,
            MoveAngle = Math.Abs(toAngle - transform.rotation.eulerAngles.y)
        };

        if (gORDAMAC.MoveAngle > 360 - gORDAMAC.MoveAngle)
        {
            gORDAMAC.RotateDirection = gORDAMAC.RotateDirection == directionEnum.Clockwise ? directionEnum.CounterClockwise : directionEnum.Clockwise;
        }

        return gORDAMAC;
    }

    public void RotateY(Vector2 directionVector)
    {
        RotateY(new Vector3(directionVector.x, 0, directionVector.y));
    }

    float epsilon = 1e-2f;
    float angleDiff;
    public void RotateY(Vector3 directionVector)
    {
        #region Handle Rotaion
        toAngleY = utilObject.CalculateAngleBase360(Vector3.forward, directionVector, Vector3.up);

        angleDiff = toAngleY - prevToAngleY;
        if (angleDiff < -epsilon || angleDiff > epsilon)
        {
            returnValue = GetOptimalRotateDirectionAndMoveAngleY(toAngleY);
            moveAngleY = returnValue.MoveAngle;
            rotateAmountY = (int)returnValue.RotateDirection * rotateAmountAbsY;
            movedAngleY = 0;
        }
        prevToAngleY = toAngleY;

        if (movedAngleY < moveAngleY)
        {
            finishY = false;
            transform.Rotate(new Vector3(0, rotateAmountY, 0));
            movedAngleY += rotateAmountAbsY;
        }
        else
        {
            finishY = true;
        }
        #endregion

        #region Or Simplier Approach
        // transform.rotation = Quaternion.RotateTowards(transform.rotation, Quaternion.LookRotation(directionVector, Vector3.up), rotateAmountAbs * 100);
        #endregion
    }

    public void RotateYImediatly(float angle)
    {
        transform.rotation = Quaternion.Euler(new Vector3(0, angle, 0));
        toAngleY = angle;
    }

    public void RotateYImediatly(Vector3 directionVector)
    {
        toAngleY = utilObject.CalculateAngleBase360(Vector3.forward, directionVector, Vector3.up);
        transform.rotation = Quaternion.Euler(0, transform.rotation.eulerAngles.y, 0);
    }

    public class GetOptimalRotateDirectionAndMoveAngleClass
    {
        private float moveAngle;
        private directionEnum rotateDirection;

        public float MoveAngle { get => moveAngle; set => moveAngle = value; }
        public directionEnum RotateDirection { get => rotateDirection; set => rotateDirection = value; }
    }
}


#region Skillable Object
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using UnityEngine;
using UnityEngine.InputSystem;

[RequireComponent(typeof(CustomMonoBehavior))]
public class SkillableObject : MonoBehaviour
{
    private List<WeaponSkill> weaponSkills = new List<WeaponSkill>();
    [SerializeField] private List<String> weaponSkillNames = new List<string>();
    [SerializeField] private bool isAttack = false;
    [SerializeField] private bool canAttack = true;
    private CustomMonoBehavior customMonoBehavior;
    private PlayerScript playerScript;
    private UtilObject utilObject = new UtilObject();
    private AnimationClip castSkillBlownDown;
    private int animatorIsUsingSkill = 0;
    public enum SkillID {SummonBigSword = 1, ThousandSword = 2}
    public bool IsAttack { get => isAttack; set => isAttack = value; }
    public bool CanAttack { get => canAttack; set => canAttack = value; }
    public PlayerScript PlayerScript { get => playerScript; set => playerScript = value; }
    public UtilObject UtilObject { get => utilObject; set => utilObject = value; }
    public AnimationClip CastSkillBlownDown { get => castSkillBlownDown; set => castSkillBlownDown = value; }
    public int AnimatorIsUsingSkill { get => animatorIsUsingSkill; set => animatorIsUsingSkill = value; }
    public CustomMonoBehavior CustomMonoBehavior { get => customMonoBehavior; set => customMonoBehavior = value; }
    public List<WeaponSkill> WeaponSkills { get => weaponSkills; set => weaponSkills = value; }

    private void Start() 
    {
        // weaponSkills.ForEach(weaponSkill => 
        // {
        //     gameObject.AddComponent(weaponSkill.GetType());
        // });
        customMonoBehavior = GetComponent<CustomMonoBehavior>();
        
        if (customMonoBehavior.EntityType.Equals("Player"))
        {
            playerScript = GetComponent<PlayerScript>();
            LoadPlayerSkillData();

            castSkillBlownDown = CustomMonoBehavior.Animator.runtimeAnimatorController.animationClips.FirstOrDefault((animatorClip) => animatorClip.name.Equals("CastSkillBlowDown"));
        }
        else
        {
            weaponSkillNames.ForEach(weaponSkillName => 
            {
                gameObject.AddComponent(Type.GetType(weaponSkillName));
                weaponSkills.Add((WeaponSkill)GetComponent(weaponSkillName));
            });
        }

        
    }

    public void LoadPlayerSkillData()
    {
        List<PlayerSkillData> playerSkillDatas = GlobalObject.Instance.FromJson<PlayerSkillData>(GlobalObject.Instance.playerSkillDataPath, true);

        playerSkillDatas.ForEach(playerSkillData => 
        {
            Type classType = Type.GetType(playerSkillData.skillName);
            Component weaponSkill;
            if (!TryGetComponent(classType, out weaponSkill))
            {
                weaponSkill = gameObject.AddComponent(classType);
                weaponSkills.Add((WeaponSkill)weaponSkill);
            }

            Type subSkill = Type.GetType(playerSkillData.subSkillName);
            Component weaponSubSkill;
            if (TryGetComponent(subSkill, out weaponSubSkill))
            {
                InputAction inputAction = customMonoBehavior.PlayerScript.PlayerInputSystem.Control.Get().asset.FindAction(playerSkillData.keybind);
                MethodInfo[] methodInfos = subSkill.GetMethods();
                MethodInfo methodInfo = Array.Find
                (
                    methodInfos, 
                    (methodInfo) => methodInfo.Name.Equals(playerSkillData.functionName) && methodInfo.GetParameters()[0].ParameterType == typeof(InputAction.CallbackContext)
                );

                inputAction.performed += (Action<InputAction.CallbackContext>)
                Delegate.CreateDelegate(typeof(Action<InputAction.CallbackContext>), weaponSubSkill, methodInfo);
            }
        });
    }

    private void FixedUpdate()
    {
        if (weaponSkills[0].CanAttack)
        {
            CanAttack = true;
        } else CanAttack = false;
    }

    public void PerformAttack(Transform location, Vector3 rotateDirection)
    {
        if (weaponSkills[0].CanAttack)
        {
            weaponSkills[0].Attack(location, rotateDirection);
        }
    }

    public void UseSkillAnimator(int skillID)
    {
        AnimatorIsUsingSkill |= (1 << skillID);
    }

    public void UseOnlySkillAnimator(int skillID)
    {
        AnimatorIsUsingSkill = 1 << skillID;
    }

    public void StopSkillAnimator(int skillID)
    {
        AnimatorIsUsingSkill &= ~(1 << skillID);
    }
}

#endregion


#region SkeletonSwordSKill
using System.Collections;
using System.ComponentModel;
using UnityEngine;

public class SkeletonSwordSkill : WeaponSkill
{
    [SerializeField] private static ObjectPool weaponPool {get; set;}

    [SerializeField] private GameObject prefab;
    private Transform weaponParent;

    public override void Attack(Transform location, Vector3 rotateDirection)
    {
        if (CanAttack)
        {
            CanAttack = false;
            PoolObject poolObject = weaponPool.PickOne();
            SkeletonSwordWeapon skeletonSwordWeapon = (SkeletonSwordWeapon)poolObject.Weapon;
            weaponParent = skeletonSwordWeapon.transform.parent;

            weaponParent.transform.position = transform.position;
            weaponParent.rotation = Quaternion.FromToRotation(Vector3.forward, location.position - weaponParent.transform.position + new Vector3(0, 1f, 0));
            skeletonSwordWeapon.CollideAndDamage.CollideExcludeTags = CustomMonoBehavior.AllyTags;
            skeletonSwordWeapon.CollideAndDamage.ColliderDamage = 10f;
            
            skeletonSwordWeapon.Attack();
            StartCoroutine(ResetAttack());
        }
    }

    IEnumerator ResetAttack()
    {
        yield return new WaitForSeconds(AttackCooldown);

        CanAttack = true;
    }

    // Start is called before the first frame update
    public override void Awake()
    {
        base.Awake();
        prefab = Instantiate(Resources.Load("SkeletonSword")) as GameObject;
        prefab.SetActive(false);
        weaponPool ??= new ObjectPool(prefab, 20, new PoolArgument(typeof(Weapon), PoolArgument.WhereComponent.Child));

        {
            WeaponSubSkills.Add(gameObject.AddComponent<SkeletonSwordSkillCharge>()); WeaponSubSkills[0].WeaponPool = weaponPool;
            WeaponSubSkills.Add(gameObject.AddComponent<SkeletonSwordSkillNonstopThrust>()); WeaponSubSkills[1].WeaponPool = weaponPool;
        }
    }

    // Update is called once per frame
    void Update()
    {
        
    }

    private void FixedUpdate() 
    {
    
    }
}

#endregion

#region SwordSkill
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Unity.VisualScripting;
using UnityEngine;
using UnityEngine.InputSystem;

public class SwordSkill : WeaponSkill
{
    [SerializeField] private static ObjectPool weaponPool {get; set;}
    [SerializeField] private GameObject swordPrefab;
    private Transform swordWeaponParent;

    public override void Awake() 
    {
        base.Awake();
        swordPrefab = Instantiate(Resources.Load("LongSword")) as GameObject;
        swordPrefab.SetActive(false);
        weaponPool ??= new ObjectPool(swordPrefab, 20, new PoolArgument(typeof(Weapon), PoolArgument.WhereComponent.Child));

        {
            WeaponSubSkills.Add(gameObject.AddComponent<SwordSkillSummonBigSword>()); 
            WeaponSubSkills.Add(gameObject.AddComponent<SwordSkillThousandSword>());
            WeaponSubSkills[0].WeaponPool = weaponPool;
            WeaponSubSkills[1].WeaponPool = weaponPool;
        }
    }

    public override void Attack(Transform target, Vector3 rotationDirection)
    {
        if (CanAttack)
        {
            CanAttack = false;
            PoolObject poolObject = weaponPool.PickOne();
            SwordWeapon swordWeapon = (SwordWeapon)poolObject.Weapon;
            swordWeaponParent = swordWeapon.transform.parent;

            swordWeapon.PlayAttackParticleSystem();
            swordWeapon.CollideAndDamage.ColliderDamage = 10f;
            swordWeaponParent.position = target.position + new Vector3(0, 0.5f, 0);
            swordWeaponParent.rotation = Quaternion.FromToRotation(Vector3.forward, rotationDirection);
            swordWeaponParent.position = swordWeaponParent.transform.TransformPoint(0, 0, -1);
            swordWeaponParent.Rotate(0, 0, Random.Range(0, 360));
            swordWeapon.CollideAndDamage.CollideExcludeTags = CustomMonoBehavior.SkillableObject.CustomMonoBehavior.AllyTags;
            swordWeapon.Attack();
            StartCoroutine(ResetAttack());
        }
    }

    public IEnumerator ResetAttack()
    {
        yield return new WaitForSeconds(AttackCooldown);

        CanAttack = true;
    }

    [SerializeField] private Vector3[] thousandSwordOriginalRotation = {new Vector3(-45, -90, 90), new Vector3(-90, 0, 0), new Vector3(-45, 90, -90)};
    [SerializeField] private float startFlyingForce = 30f;
    private Vector3 midPointScale = new Vector3();
    public void ThousandSword(InputAction.CallbackContext callbackContext)
    {
        List<PoolObject> poolObjects = weaponPool.Pick(3);
        SwordWeapon swordWeapon;
        Transform swordWeaponParent1;
        
        GameObject target = CustomMonoBehavior.PlayerScript.TargetableObject.TargetChecker.NearestTarget.SkillCastOriginPoint;
        CustomMonoBehavior.Animator.SetBool("HandUpCast", true);
        CustomMonoBehavior.Animator.Play("UpperBody.HandUpCast", 1, 0);
        CustomMonoBehavior.SkillableObject.UseOnlySkillAnimator((int)SkillableObject.SkillID.ThousandSword);
        for (int i=0;i<thousandSwordOriginalRotation.Length;i++)
        {
            swordWeapon = (SwordWeapon)poolObjects[i].Weapon;
            swordWeapon.CollideAndDamage.ColliderDamage = 20f;
            swordWeaponParent1 = swordWeapon.transform.parent;
            swordWeaponParent1.transform.rotation = Quaternion.Euler(thousandSwordOriginalRotation[i]);
            swordWeaponParent1.position = CustomMonoBehavior.SkillCastOriginPoint.transform.position;
            swordWeapon.FlyingTrail.enabled = true;
            swordWeapon.CollideAndDamage.CollideExcludeTags = CustomMonoBehavior.SkillableObject.CustomMonoBehavior.AllyTags;
            swordWeapon.Animator.SetBool("ThousandSword", true);


            swordWeapon.ParentRigidBody.AddForce(swordWeaponParent1.transform.forward * startFlyingForce, ForceMode.Impulse);
            CoroutineWrapper coroutineWrapper = new CoroutineWrapper();
            IEnumerator thousandSwordCoroutine = ThousandSwordCoroutine(swordWeapon, swordWeaponParent1, target, coroutineWrapper);
            coroutineWrapper.coroutine = StartCoroutine(thousandSwordCoroutine);
        }
    }

    [SerializeField] private float flyingAtTargetSpeed = 1f;
    [SerializeField] private float rotateSpeed = 10;
    private float rotateSpeedPerDeltaTime;
    public IEnumerator ThousandSwordCoroutine(SwordWeapon swordWeapon, Transform swordWeaponParent1, GameObject target, CoroutineWrapper coroutineWrapper)
    {
        yield return new WaitForSeconds(1);

        Vector3 moveDirection = target.transform.position - swordWeaponParent1.transform.position;
        moveDirection = moveDirection.normalized * flyingAtTargetSpeed;
        rotateSpeedPerDeltaTime = rotateSpeed * Time.fixedDeltaTime;
        swordWeapon.ParentRigidBody.velocity = Vector3.zero;
        StartCoroutine(StopThousandSword(swordWeapon, swordWeaponParent1, coroutineWrapper.coroutine));

        while (true)
        {
            yield return new WaitForSeconds(Time.fixedDeltaTime);

            swordWeaponParent1.transform.position += moveDirection;
            swordWeaponParent1.transform.rotation = Quaternion.LookRotation(Vector3.RotateTowards
            (
                swordWeaponParent1.transform.forward
                , target.transform.position - swordWeaponParent1.transform.position, rotateSpeedPerDeltaTime, 0f
            ));
        }
    }

    public IEnumerator StopThousandSword(SwordWeapon swordWeapon, Transform swordWeaponParent1, Coroutine thousandSwordCoroutine)
    {
        yield return new WaitForSeconds(2);

        swordWeapon.Animator.SetBool("ThousandSword", false);
        CustomMonoBehavior.Animator.SetBool("HandUpCast", false);
        CustomMonoBehavior.SkillableObject.StopSkillAnimator((int)SkillableObject.SkillID.ThousandSword);
        StopCoroutine(thousandSwordCoroutine);
        swordWeaponParent1.rotation = Quaternion.Euler(0, 0, 0);
        swordWeapon.transform.localPosition = Vector3.zero;
        swordWeapon.FlyingTrail.enabled = false;
        swordWeaponParent1.gameObject.SetActive(false);
    }
}

#endregion

#region WeaponSkill
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using UnityEngine;

public abstract class WeaponSkill : MonoBehaviour
{
    private bool canAttack = true;
    private float attackCooldown = 1f;
    private float attackDamage = 10f;
    private CustomMonoBehavior customMonoBehavior;
    private List<WeaponSubSkill> weaponSubSkills = new List<WeaponSubSkill>();
    public float AttackCooldown { get => attackCooldown; set => attackCooldown = value; }
    public bool CanAttack { get => canAttack; set => canAttack = value; }
    public float AttackDamage { get => attackDamage; set => attackDamage = value; }
    public CustomMonoBehavior CustomMonoBehavior { get => customMonoBehavior; set => customMonoBehavior = value; }
    internal List<WeaponSubSkill> WeaponSubSkills { get => weaponSubSkills; set => weaponSubSkills = value; }

    public abstract void Attack(Transform location, Vector3 rotateDirection);
    public virtual void Awake()
    {
        CustomMonoBehavior = GetComponent<CustomMonoBehavior>();
    }
}

#endregion